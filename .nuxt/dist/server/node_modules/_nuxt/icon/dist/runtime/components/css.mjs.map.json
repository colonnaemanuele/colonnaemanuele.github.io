{"file":"css.mjs","mappings":";;;;;;;AAMA,MAAM,oBAAoB;AAC1B,SAAS,kBAAkB,UAAU;AAC5B,SAAA,SAAS,QAAQ,aAAa,MAAM;AAC7C;AAqCO,MAAM,cAA8C,gCAAA;AAAA,EACzD,MAAM;AAAA,EACN,OAAO;AAAA,IACL,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,WAAW;AAAA,MACT,MAAM,CAAC,UAAU,SAAS,IAAI;AAAA,MAC9B,SAAS;AAAA,MACT,UAAU;AAAA,IAAA;AAAA,EAEd;AAAA,EACA,MAAM,OAAO;AACX,UAAM,OAAO,WAAW;AAClB,UAAA,UAAU,eAAe;AACzB,UAAA,WAAW,SAAS,MAAM,MAAM,OAAO,QAAQ,oBAAoB,MAAM,OAAO,EAAE;AAaxF,UAAM,WAAW,SAAS,MAAM,MAAM,kBAAkB,SAAS,KAAK,CAAC;AAC9D,aAAA,OAAO,MAAM,YAAY,MAAM;AACtC,UAAI,eAAe,SAAS;AAC5B,UAAI,QAAQ,gBAAgB;AAC1B,uBAAe,UAAU,YAAY;AAAA,MAAA;AAEjC,YAAA,MAAM,WAAW,MAAM;AAAA,QAC3B;AAAA,QACA,QAAQ;AAAA,QACR,WAAW,mBAAmB,MAAM,WAAW,QAAQ,SAAS;AAAA,MAAA,CACjE;AACG,UAAA,QAAQ,YAAY,WAAW;AACjC,eAAO,UAAU,QAAQ,QAAQ,MAAM,GAAG;AAAA,MAAA;AAErC,aAAA;AAAA,IAAA;AAwCT,qBAAiB,YAAY;;AACH;AACtB,cAAM,UAAU,mBAAmB,QAAQ,CAAC;AAC5C,YAAI,GAAC,wCAAS,0BAAT,mBAAgC,SAAS,SAAS,SAAQ;AACvD,gBAAA,OAAO,MAAM,SAAS,MAAM,MAAM,QAAQ,YAAY,EAAE,MAAM,MAAM,IAAI;AAC9E,cAAI,CAAC;AACI,mBAAA;AACT,cAAI,SAAS,KAAK,OAAO,SAAS,SAAS,iBAAiB;AAC5D,cAAI,CAAC,QAAQ;AACX,qBAAS,KAAK,OAAO,SAAS,SAAS,iBAAiB,wBAAwB,IAAI;AACpF,iBAAK,eAAe,MAAM;AAChB,sBAAA;AAAA,gBACN,OAAO;AAAA,kBACL,MAAM;AACE,0BAAA,MAA+B;AACjC,wBAAA,MAAM,MAAM,KAAK,OAAO,OAAQ,CAAA,EAAE,KAAA,EAAO,KAAK,GAAG;AACrD,wBAAI,QAAQ,UAAU;AACd,4BAAA,UAAU,QAAQ,QAAQ,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG;AAAA,oBAAA;AAE/C,2BAAA,EAAE,WAAW,IAAI;AAAA,kBAAA;AAAA,gBAC1B;AAAA,cACF,GACC;AAAA,gBACD,aAAa;AAAA,cAAA,CACd;AAAA,YAAA,CACF;AAAA,UAAA;AAEH,cAAI,MAAM,QAAQ,CAAC,OAAO,IAAI,MAAM,IAAI,GAAG;AACnC,kBAAA,MAAM,OAAO,MAAM,KAAK;AACvB,mBAAA,IAAI,MAAM,MAAM,GAAG;AAAA,UAAA;AAErB,iBAAA;AAAA,QAAA;AAAA,MACT;AAAA,IACF,CACD;AACM,WAAA,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,WAAW,SAAS,KAAK,GAAG;AAAA,EAAA;AAEjE,CAAC;","names":[],"sources":["../../../../../../../../../node_modules/@nuxt/icon/dist/runtime/components/css.js"],"sourcesContent":["import { addIcon, getIcon as _getIcon } from \"@iconify/vue\";\nimport { computed, watch, h, defineComponent } from \"vue\";\nimport { getIconCSS } from \"@iconify/utils/lib/css/icon\";\nimport { loadIcon, resolveCustomizeFn } from \"./shared.js\";\nimport { useAppConfig, useNuxtApp, useHead, useRuntimeConfig, onServerPrefetch } from \"#imports\";\nlet cssSelectors;\nconst SYMBOL_SERVER_CSS = \"NUXT_ICONS_SERVER_CSS\";\nfunction escapeCssSelector(selector) {\n  return selector.replace(/([^\\w-])/g, \"\\\\$1\");\n}\nfunction getAllSelectors() {\n  if (cssSelectors)\n    return cssSelectors;\n  cssSelectors = /* @__PURE__ */ new Set();\n  const filter = (selector) => {\n    selector = selector.replace(/^:where\\((.*)\\)$/, \"$1\").trim();\n    if (selector.startsWith(\".\")) {\n      return selector;\n    }\n  };\n  const scanCssRules = (rules) => {\n    if (!rules?.length)\n      return;\n    for (const rule of rules) {\n      if (rule?.cssRules) {\n        scanCssRules(rule.cssRules);\n      }\n      const selectorRaw = rule?.selectorText;\n      if (typeof selectorRaw === \"string\") {\n        const selector = filter(selectorRaw);\n        if (selector)\n          cssSelectors.add(selector);\n      }\n    }\n  };\n  if (typeof document !== \"undefined\") {\n    for (const styleSheet of document.styleSheets) {\n      try {\n        const rules = styleSheet.cssRules || styleSheet.rules;\n        scanCssRules(rules);\n      } catch {\n      }\n    }\n  }\n  return cssSelectors;\n}\nexport const NuxtIconCss = /* @__PURE__ */ defineComponent({\n  name: \"NuxtIconCss\",\n  props: {\n    name: {\n      type: String,\n      required: true\n    },\n    customize: {\n      type: [Function, Boolean, null],\n      default: null,\n      required: false\n    }\n  },\n  setup(props) {\n    const nuxt = useNuxtApp();\n    const options = useAppConfig().icon;\n    const cssClass = computed(() => props.name ? options.cssSelectorPrefix + props.name : \"\");\n    function getIcon(name) {\n      if (!name)\n        return;\n      const icon = _getIcon(name);\n      if (icon)\n        return icon;\n      const payload = nuxt.payload?.data?.[name];\n      if (payload) {\n        addIcon(name, payload);\n        return payload;\n      }\n    }\n    const selector = computed(() => \".\" + escapeCssSelector(cssClass.value));\n    function getCSS(icon, withLayer = true) {\n      let iconSelector = selector.value;\n      if (options.cssWherePseudo) {\n        iconSelector = `:where(${iconSelector})`;\n      }\n      const css = getIconCSS(icon, {\n        iconSelector,\n        format: \"compressed\",\n        customise: resolveCustomizeFn(props.customize, options.customize)\n      });\n      if (options.cssLayer && withLayer) {\n        return `@layer ${options.cssLayer} { ${css} }`;\n      }\n      return css;\n    }\n    if (import.meta.client) {\n      const selectors = getAllSelectors();\n      async function mountCSS(icon) {\n        if (selectors.has(selector.value))\n          return;\n        if (typeof document === \"undefined\")\n          return;\n        const style = document.createElement(\"style\");\n        style.textContent = getCSS(icon);\n        if (import.meta.dev) {\n          style.dataset.nuxtIconDev = props.name;\n        }\n        const firstStyle = document.head.querySelector('style, link[rel=\"stylesheet\"]');\n        if (firstStyle)\n          document.head.insertBefore(style, firstStyle);\n        else\n          document.head.appendChild(style);\n        selectors.add(selector.value);\n      }\n      watch(\n        () => props.name,\n        () => {\n          if (selectors.has(selector.value)) {\n            return;\n          }\n          const data = getIcon(props.name);\n          if (data) {\n            mountCSS(data);\n          } else {\n            loadIcon(props.name, import.meta.server ? options.fetchTimeout : -1).then((data2) => {\n              if (data2)\n                mountCSS(data2);\n            }).catch(() => null);\n          }\n        },\n        { immediate: true }\n      );\n    }\n    onServerPrefetch(async () => {\n      if (import.meta.server) {\n        const configs = useRuntimeConfig().icon || {};\n        if (!configs?.serverKnownCssClasses?.includes(cssClass.value)) {\n          const icon = await loadIcon(props.name, options.fetchTimeout).catch(() => null);\n          if (!icon)\n            return null;\n          let ssrCSS = nuxt.vueApp._context.provides[SYMBOL_SERVER_CSS];\n          if (!ssrCSS) {\n            ssrCSS = nuxt.vueApp._context.provides[SYMBOL_SERVER_CSS] = /* @__PURE__ */ new Map();\n            nuxt.runWithContext(() => {\n              useHead({\n                style: [\n                  () => {\n                    const sep = import.meta.dev ? \"\\n\" : \"\";\n                    let css = Array.from(ssrCSS.values()).sort().join(sep);\n                    if (options.cssLayer) {\n                      css = `@layer ${options.cssLayer} {${sep}${css}${sep}}`;\n                    }\n                    return { innerHTML: css };\n                  }\n                ]\n              }, {\n                tagPriority: \"low\"\n              });\n            });\n          }\n          if (props.name && !ssrCSS.has(props.name)) {\n            const css = getCSS(icon, false);\n            ssrCSS.set(props.name, css);\n          }\n          return null;\n        }\n      }\n    });\n    return () => h(\"span\", { class: [\"iconify\", cssClass.value] });\n  }\n});\n"],"version":3}